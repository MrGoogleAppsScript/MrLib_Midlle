

function setItems(sheetName, items) {
  let context = new MrContext(getSettings().urls.Проекты, getSettings());
  let sheetModel = new MrClassSheetModel(sheetName, context);
  // sheetModel.clearBodyContents();
  if (sheetModel.isStoped === true) return;

  sheetModel.setItems(items);
}


function updateItems(sheetName, items) {

  let url = getSettings().urls.Проекты;
  // "НомераПроектов"
  if (sheetName == "НомераПроектов") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }
  if (sheetName == "service") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }

  if (sheetName == "Версия") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }

  if (sheetName == "АрхивПроектов") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }

  if (sheetName == "Лог") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }

  // return
  let context = new MrContext(url, getSettings());
  let sheetModel = new MrClassSheetModel(sheetName, context);
  // sheetModel.clearBodyContents();
  // if (sheetModel.isStoped === true) return;

  // Logger.log(`function updateItems ${JSON.stringify(items)}`);
  sheetModel.updateItems(items);
}

function getItemByKey(sheetName, key, fild_name, defvalue) {
  let url = getSettings().urls.Проекты;
  if (sheetName == "НомераПроектов") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }
  if (sheetName == "service") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }

  if (sheetName == "АрхивПроектов") {
    url = "https://docs.google.com/spreadsheets/d/1???????????????????????????????????????????/edit";
  }


  let context = new MrContext(url, getSettings());
  let sheetModel = new MrClassSheetModel(sheetName, context);
  return sheetModel.getValueByKey(key, fild_name, defvalue);

}

function setFildForItem(sheetName, itemKey, fild_name, value) {
  let item = new Object()
  item.key = itemKey;
  item[fild_name] = value;
  updateItems(sheetName, [item])
}





function getMapDictionarys(sheetName = getSettings().sheetNames.Словари,) {
  let context = new MrContext(getSettings().urls.Проекты, getSettings());
  let sheetModel = new MrClassSheetModel(sheetName, context);
  return sheetModel.getMap();

}


function getSheetModelBySheetName(sheetName) {
  return makeSheetModelBy(getSettings().urls.Проекты, sheetName);
}




function makeSheetModelBy(url, sheetName, rowConf = undefined) {
  let context = new MrContext(url, getSettings());
  return new MrClassSheetModel(sheetName, context, rowConf);
}




function getSheetModelПроектыВИсполнение() {
  let context_from = new MrContext(getSettings().urls.ПромежуткиРеестр, getSettings());
  // let sheetModel_ПроектыВИсполнение = new MrClassSheetModel(task.param.sheetNames.from, context_from);
  let sheetModel_ПроектыВИсполнение = new MrClassSheetModelПроектыВИсполнение(getSettings().sheetNames.Проекты_в_Исполнение, context_from);
  return sheetModel_ПроектыВИсполнение;
}
